package paramorphism-obfuscator;

import java.util.Map;
import kotlin.Unit;
import kotlin.jvm.functions.Function1;
import kotlin.jvm.internal.Lambda;
import kotlin.jvm.internal.Reflection;
import org.jetbrains.annotations.NotNull;
import org.objectweb.asm.tree.FieldNode;
import paramorphism-obfuscator.instruction.ArrayVarInstruction;
import paramorphism-obfuscator.instruction.FieldInstruction;
import paramorphism-obfuscator.instruction.IntegerInstruction;
import paramorphism-obfuscator.instruction.JumpInstruction;
import paramorphism-obfuscator.instruction.MathInstruction;
import paramorphism-obfuscator.instruction.MethodInstruction;
import paramorphism-obfuscator.instruction.NumberInstruction;
import paramorphism-obfuscator.instruction.StackInstruction;
import paramorphism-obfuscator.instruction.TypeInstruction;
import paramorphism-obfuscator.instruction.VarInstruction;
import paramorphism-obfuscator.wrappers.ClassWrapper;
import paramorphism-obfuscator.wrappers.IInstructionWrapper;
import paramorphism-obfuscator.wrappers.MethodWrapper;

public final class qh extends Lambda implements Function1 {
   public final ClassWrapper bcv;
   public final FieldNode bcw;

   public Object invoke(Object var1) {
      this.a((MethodWrapper)var1);
      return Unit.INSTANCE;
   }

   public final void a(@NotNull MethodWrapper var1) {
      NumberInstruction.addIZero((IInstructionWrapper)var1);
      VarInstruction.addIntStoreTwo((IInstructionWrapper)var1);
      qq var2 = new qq(var1);
      qp var3 = new qp(var1, var2);
      qk var4 = new qk(var1, var2);
      var3.a();
      VarInstruction.addIntStoreThree((IInstructionWrapper)var1);
      NumberInstruction.addIZero((IInstructionWrapper)var1);
      VarInstruction.addIntStore((IInstructionWrapper)var1, 4);
      var1.getLabels().a(3).a();
      VarInstruction.addIntLoad((IInstructionWrapper)var1, 4);
      VarInstruction.addIntLoad((IInstructionWrapper)var1, 3);
      JumpInstruction.addIfIntCompareGreaterEqual((IInstructionWrapper)var1, var1.getLabels().a(4));
      var3.a();
      VarInstruction.addIntStore((IInstructionWrapper)var1, 5);
      var3.a();
      VarInstruction.addIntStore((IInstructionWrapper)var1, 6);
      VarInstruction.addObjectLoadZero((IInstructionWrapper)var1);
      FieldInstruction.addGetField((IInstructionWrapper)var1, this.bcv.getType(), this.bcw.name, Reflection.getOrCreateKotlinClass(Map.class));
      VarInstruction.addIntLoad((IInstructionWrapper)var1, 5);
      MethodInstruction.addInvokeStatic((IInstructionWrapper)var1, "java/lang/Integer", "valueOf", "java/lang/Integer", var1.bi());
      VarInstruction.addIntLoad((IInstructionWrapper)var1, 6);
      ArrayVarInstruction.addNewArray((IInstructionWrapper)var1, Reflection.getOrCreateKotlinClass(String[].class));
      StackInstruction.addDup((IInstructionWrapper)var1);
      VarInstruction.addObjectStore((IInstructionWrapper)var1, 7);
      MethodInstruction.addInvokeInterface((IInstructionWrapper)var1, Reflection.getOrCreateKotlinClass(Map.class), "put", Reflection.getOrCreateKotlinClass(Object.class), Reflection.getOrCreateKotlinClass(Object.class), Reflection.getOrCreateKotlinClass(Object.class));
      StackInstruction.addPop((IInstructionWrapper)var1);
      NumberInstruction.addIZero((IInstructionWrapper)var1);
      VarInstruction.addIntStore((IInstructionWrapper)var1, 8);
      var1.getLabels().a(10).a();
      VarInstruction.addIntLoad((IInstructionWrapper)var1, 8);
      VarInstruction.addIntLoad((IInstructionWrapper)var1, 6);
      JumpInstruction.addIfIntCompareGreaterEqual((IInstructionWrapper)var1, var1.getLabels().a(11));
      var4.a();
      VarInstruction.addIntStore((IInstructionWrapper)var1, 9);
      NumberInstruction.addIZero((IInstructionWrapper)var1);
      VarInstruction.addIntStore((IInstructionWrapper)var1, 13);
      var1.getLabels().a("xor_loop_1_head").a();
      VarInstruction.addObjectLoadOne((IInstructionWrapper)var1);
      VarInstruction.addIntLoadTwo((IInstructionWrapper)var1);
      VarInstruction.addIntLoad((IInstructionWrapper)var1, 13);
      MathInstruction.addIAdd((IInstructionWrapper)var1);
      VarInstruction.addObjectLoadOne((IInstructionWrapper)var1);
      VarInstruction.addIntLoadTwo((IInstructionWrapper)var1);
      VarInstruction.addIntLoad((IInstructionWrapper)var1, 13);
      MathInstruction.addIAdd((IInstructionWrapper)var1);
      ArrayVarInstruction.addByteArrayLoad((IInstructionWrapper)var1);
      IntegerInstruction.addInteger((IInstructionWrapper)var1, 170);
      MathInstruction.addIExclusiveOr((IInstructionWrapper)var1);
      ArrayVarInstruction.addByteArrayStore((IInstructionWrapper)var1);
      MathInstruction.addIIncrementOne((IInstructionWrapper)var1, 13);
      VarInstruction.addIntLoad((IInstructionWrapper)var1, 13);
      VarInstruction.addIntLoad((IInstructionWrapper)var1, 9);
      JumpInstruction.addIfIntCompareLess((IInstructionWrapper)var1, var1.getLabels().a("xor_loop_1_head"));
      TypeInstruction.addNew((IInstructionWrapper)var1, Reflection.getOrCreateKotlinClass(String.class));
      StackInstruction.addDup((IInstructionWrapper)var1);
      VarInstruction.addObjectLoadOne((IInstructionWrapper)var1);
      VarInstruction.addIntLoadTwo((IInstructionWrapper)var1);
      VarInstruction.addIntLoad((IInstructionWrapper)var1, 9);
      MethodInstruction.addInvokeSpecial((IInstructionWrapper)var1, Reflection.getOrCreateKotlinClass(String.class), "<init>", var1.be(), Reflection.getOrCreateKotlinClass(byte[].class), var1.bi(), var1.bi());
      VarInstruction.addObjectStore((IInstructionWrapper)var1, 10);
      VarInstruction.addIntLoadTwo((IInstructionWrapper)var1);
      VarInstruction.addIntLoad((IInstructionWrapper)var1, 9);
      MathInstruction.addIAdd((IInstructionWrapper)var1);
      VarInstruction.addIntStore((IInstructionWrapper)var1, 2);
      var4.a();
      VarInstruction.addIntStore((IInstructionWrapper)var1, 11);
      NumberInstruction.addIZero((IInstructionWrapper)var1);
      VarInstruction.addIntStore((IInstructionWrapper)var1, 13);
      var1.getLabels().a("xor_loop_2_head").a();
      VarInstruction.addObjectLoadOne((IInstructionWrapper)var1);
      VarInstruction.addIntLoadTwo((IInstructionWrapper)var1);
      VarInstruction.addIntLoad((IInstructionWrapper)var1, 13);
      MathInstruction.addIAdd((IInstructionWrapper)var1);
      VarInstruction.addObjectLoadOne((IInstructionWrapper)var1);
      VarInstruction.addIntLoadTwo((IInstructionWrapper)var1);
      VarInstruction.addIntLoad((IInstructionWrapper)var1, 13);
      MathInstruction.addIAdd((IInstructionWrapper)var1);
      ArrayVarInstruction.addByteArrayLoad((IInstructionWrapper)var1);
      IntegerInstruction.addInteger((IInstructionWrapper)var1, 170);
      MathInstruction.addIExclusiveOr((IInstructionWrapper)var1);
      ArrayVarInstruction.addByteArrayStore((IInstructionWrapper)var1);
      MathInstruction.addIIncrementOne((IInstructionWrapper)var1, 13);
      VarInstruction.addIntLoad((IInstructionWrapper)var1, 13);
      VarInstruction.addIntLoad((IInstructionWrapper)var1, 11);
      JumpInstruction.addIfIntCompareLess((IInstructionWrapper)var1, var1.getLabels().a("xor_loop_2_head"));
      TypeInstruction.addNew((IInstructionWrapper)var1, Reflection.getOrCreateKotlinClass(String.class));
      StackInstruction.addDup((IInstructionWrapper)var1);
      VarInstruction.addObjectLoadOne((IInstructionWrapper)var1);
      VarInstruction.addIntLoadTwo((IInstructionWrapper)var1);
      VarInstruction.addIntLoad((IInstructionWrapper)var1, 11);
      MethodInstruction.addInvokeSpecial((IInstructionWrapper)var1, Reflection.getOrCreateKotlinClass(String.class), "<init>", var1.be(), Reflection.getOrCreateKotlinClass(byte[].class), var1.bi(), var1.bi());
      VarInstruction.addObjectStore((IInstructionWrapper)var1, 12);
      VarInstruction.addIntLoadTwo((IInstructionWrapper)var1);
      VarInstruction.addIntLoad((IInstructionWrapper)var1, 11);
      MathInstruction.addIAdd((IInstructionWrapper)var1);
      VarInstruction.addIntStore((IInstructionWrapper)var1, 2);
      VarInstruction.addObjectLoad((IInstructionWrapper)var1, 7);
      VarInstruction.addIntLoad((IInstructionWrapper)var1, 8);
      NumberInstruction.addITwo((IInstructionWrapper)var1);
      ArrayVarInstruction.addNewArray((IInstructionWrapper)var1, Reflection.getOrCreateKotlinClass(String.class));
      StackInstruction.addDup((IInstructionWrapper)var1);
      NumberInstruction.addIZero((IInstructionWrapper)var1);
      VarInstruction.addObjectLoad((IInstructionWrapper)var1, 10);
      ArrayVarInstruction.addObjectArrayStore((IInstructionWrapper)var1);
      StackInstruction.addDup((IInstructionWrapper)var1);
      NumberInstruction.addIOne((IInstructionWrapper)var1);
      VarInstruction.addObjectLoad((IInstructionWrapper)var1, 12);
      ArrayVarInstruction.addObjectArrayStore((IInstructionWrapper)var1);
      ArrayVarInstruction.addObjectArrayStore((IInstructionWrapper)var1);
      MathInstruction.addIIncrementOne((IInstructionWrapper)var1, 8);
      JumpInstruction.addGoto((IInstructionWrapper)var1, var1.getLabels().a(10));
      var1.getLabels().a(11).a();
      MathInstruction.addIIncrementOne((IInstructionWrapper)var1, 4);
      JumpInstruction.addGoto((IInstructionWrapper)var1, var1.getLabels().a(3));
      var1.getLabels().a(4).a();
      JumpInstruction.addDuplicateReturn((IInstructionWrapper)var1);
   }

   public qh(ClassWrapper var1, FieldNode var2) {
      super(1);
      this.bcv = var1;
      this.bcw = var2;
   }
}
